<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
  "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd"
[
  <!ENTITY % magic.fixup SYSTEM "http://labs.omniti.com/docbook/ent">
  %magic.fixup;
]>
<chapter id="config.noitd">
  <title>noitd</title>
  <example>
  <title>Basic noitd configuration struture</title>
  <programlisting><![CDATA[
  <noit>
    <eventer/>
    <modules>
      <...>
        <module />
      </...>
    </modules>
    <logs>
      <...>
        <log>
          <outlet />
          <outlet />
        </log>
      </...>
    </logs>
    <listeners>
      <...>
        <listener/>
        <listener>
          <config />
          <sslconfig />
        <listener>
      </...>
    </listeners>
    <checks>
      <...>
        <check uuid="xxx" />
      </...>
    </checks>
  </noit>
]]></programlisting>
</example>

<section id="config.noitd.implicitinheritance">
<title>Implicit Inheritance</title>
<para>
Unless otherwise specified, elements and attributes are inherited from
all ancestors.  As is typical with inheritance, the youngest/deepest
value overrides values of ancestors.  If the value requested is a set
of key/value pairs, the top-most ancestor is queried, then its
child is queried, merging values, replacing conflicts and so on until
the youngest/deepest node is reached.
</para>

<example>
<title>Simple implicit inheritance configuration example</title>
<programlisting><![CDATA[
      <a foo="bar">
        <config>
          <key1>val a 1</key1>
          <key2>val a 2</key2>
        </config>
        <b quux="baz">
          <config>
            <key1>val b 1</key1>
            <key3>val b 3</key3>
          </config>
          <c foo="meme" />
        </b>
      </a>
]]></programlisting>
</example>

<para>
When looking at the "foo" attribute we see the following values at nodes:
</para>
<variablelist>
  <varlistentry><term>a</term><listitem><para>bar</para></listitem></varlistentry>
  <varlistentry><term>b</term><listitem><para>bar</para></listitem></varlistentry>
  <varlistentry><term>c</term><listitem><para>meme</para></listitem></varlistentry>
</variablelist>

<para>
When looking at the "quux" attribute we see the following values at nodes:
</para>
<variablelist>
  <varlistentry><term>a</term><listitem><para>(none)</para></listitem></varlistentry>
  <varlistentry><term>b</term><listitem><para>baz</para></listitem></varlistentry>
  <varlistentry><term>c</term><listitem><para>baz</para></listitem></varlistentry>
</variablelist>

<para>
When looking at the key/value set "config" we see the following values at nodes:
</para>
<variablelist>
  <varlistentry><term>a</term><listitem><para>{ key1: "val a 1", key2: "val a 2" }</para></listitem></varlistentry>
  <varlistentry><term>b</term><listitem><para>{ key1: "val b 1", key2: "val a 2", key3: "val b 3" }</para></listitem></varlistentry>
  <varlistentry><term>c</term><listitem><para>{ key1: "val b 1", key2: "val a 2", key3: "val b 3" } (same as b)</para></listitem></varlistentry>
</variablelist>

<para>
This inheritance model allows for "non-repetitive" configuration
approaches: "express yourself once and reuse."
</para>
</section>

<section id="config.noitd.explicitinheritance">
<title>Explicit Inheritance</title>

<para>
Sometimes it is useful to define a configuration key/value set
for reuse, but the strict parent-child inheritance model is awkward.
Under these circumstances, the explicit inheritance often solves the
issue at hand.  With explicit inheritance, a configuration can inherit
from another named node elsewhere in the configuration.
</para>
<para>
The &lt;config /&gt; stanzas can be identified, as is typical in XML, with
the "id" attribute: &lt;config id="sample" /&gt;.  Additionally, any config
may explicitly specify that it inherits from a named config by
specifying the "inherit" attribute.
</para>
<para>
Any &lt;config /&gt;, A, which has the "inherit" attribute will first
inherit from its most direct parent, then supplement/replace those
key/values with the configuration whose "id" attribute matches the
"inherit" attribute of A, and finally supplement/replace those
key/values with key/values directly beneath A.  The entire tree is
searched for a node whose "id" matches A's "inherit" attribute.
</para>

<example>
<title>Simple explicity inheritance configuration example</title>
<programlisting><![CDATA[
  <config name="A">
    <key1>a</key1>
    <key2>b</key2>
    <key3>c</key3>
    <config name="C" inherit="bob">
      <key1>AAA</key1>
      <key4>DDD</key4>
    </config>
  </config>
  <x>
    <y>
      <z>
        <config name="B" id="bob">
          <key2>bobB</key2>
          <key5>bobE</key5>
        </config>
      </z>
    </y>
  </x>
]]></programlisting>
</example>

<para>The config named "A" contains:</para>
<variablelist spacing="compact">
  <varlistentry><term>key1</term><listitem><para>a</para></listitem></varlistentry>
  <varlistentry><term>key2</term><listitem><para>b</para></listitem></varlistentry>
  <varlistentry><term>key3</term><listitem><para>c</para></listitem></varlistentry>
</variablelist>

<para>The config named "C" contains:</para>
<variablelist>
  <varlistentry><term>key1</term><listitem><para>AAA</para></listitem></varlistentry>
  <varlistentry><term>key2</term><listitem><para>bobB</para></listitem></varlistentry>
  <varlistentry><term>key3</term><listitem><para>c</para></listitem></varlistentry>
  <varlistentry><term>key4</term><listitem><para>DDD</para></listitem></varlistentry>
  <varlistentry><term>key5</term><listitem><para>bobE</para></listitem></varlistentry>
</variablelist>

<para>
It should be noted hat all config's include the one named "B" above
follows this same inheritance model.
</para>
</section>

<section id="config.noitd.section.eventer">
  <title>The &lt;eventer&gt; section</title>

<para>
This section provides configuration directives to the eventing
subsystem.  Think of the eventer as the engine that drives all I/O,
jobs, and timed events.  To choose the eventer, the "implementation"
attribute is used in the eventer node.  For example, to select the
kqueue eventer (for Mac OS X or modern BSDs):
</para>

<programlisting><![CDATA[
  <eventer implementation="kqueue" />
]]></programlisting>

<para>
The following eventer implementations exist: kqueue (Mac/BSD), epoll (Linux), ports (Solaris 10+).
</para>
</section>

<section id="config.noitd.section.logs">
  <title>The &lt;logs&gt; section</title>

<para>
The logs section contains &lt;log&gt; elements at arbitrary depths.  A log
requires several attributes to be useful:
</para>

<variablelist>
  <varlistentry><term>name</term><listitem><para>
   "name" this must me unique.  Several names have meaning within the
   product.  If you match that name, you control how that information
   is logged.
  </para></listitem></varlistentry>

  <varlistentry><term>type</term><listitem><para>
   "type" this specified ths underlying log writing implementation.
   Valid options are "file" (the default if unspecified), "jlog" which
   is the a binary 'auto-rotating', consumable, multi-subscriber log
   format.
  </para></listitem></varlistentry>

  <varlistentry><term>path</term><listitem><para>
   "path" the path to the log (interpreted by the "type"
   implementation).
  </para></listitem></varlistentry>

  <varlistentry><term>debug</term><listitem><para>
   "debug" (boolean: &lt;true|false&gt;, default false) that dictates
   whether or not the file:line number of the callee will be included
   in the log output.  This only applies loggers that have write
   operations (like files and jlogs).
  </para></listitem></varlistentry>

  <varlistentry><term>disabled</term><listitem><para>
   "disabled" (boolean: &lt;true|false&gt;, default false) that dictates
   whether the log implmenation will actually write anything.  If set
   to true, the log will be silences and will not propagate input to
   any attached outlets.
  </para></listitem></varlistentry>

  <varlistentry><term>timestamps</term><listitem><para>
   "debug" (boolean: &lt;true|false&gt;, default false) that dictates
   whether or not a microsecond granular time will be included
   in the log output.  This only applies loggers that have write
   operations (like files and jlogs).
  </para></listitem></varlistentry>

  <varlistentry><term>rotate_seconds</term><listitem><para>
   "rotate_seconds" (integer: default unset, minimum 600) that specifies
   how many seconds of data the given log file should contain.  Every
   "rotate_seconds" seconds (aligned with UNIX epoch), the log will be
   rotated to a file of the same name with the current UNIX timestamp
   dot-appended.  This can be used in combination with "rotate_bytes"
   for rather interesting results.
  </para></listitem></varlistentry>

  <varlistentry><term>rotate_bytes</term><listitem><para>
   "rotate_bytes" (integer: default unset, minimum 102400) that specifies
   the maximum number of bytes the file may contain before rotation is
   applied.  This is not enforced after each write, but instead
   the file size is monitored "frequently" and rotation applied.  This
   can mean that the file can grow slightly larger than the specified
   amount.  This can be used in combination with "rotate_seconds" for
   rather interesting results.
  </para></listitem></varlistentry>
</variablelist>
<para>
Within a &lt;log&gt; element, zero, one or many &lt;outlet&gt; elements may be
present.  The outlet element must contain a "name" attribute (this
attribute is not inherited) that matches a *previously* declared &lt;log&gt;
by its "name" attribute.  Foreach &lt;outlet&gt; tag, a sink is created so
that any input sent to the containing &lt;log&gt; will additionally be
propagated to the &lt;outlet&gt;.
</para>
<para>
There is an implicit log named "stderr" that is attached to file
descriptor 2 that has timestamps enabled.
</para>

<section id="config.noitd.section.logs.special">
  <title>Special log names</title>

  <variablelist>
  <varlistentry><term>stderr</term><listitem><para>
   opened to file descriptor two during log initialization.
  </para></listitem></varlistentry>

  <varlistentry><term>error</term><listitem><para>
   destination for error messages.
  </para></listitem></varlistentry>

  <varlistentry><term>debug</term><listitem><para>
    destination for debugging output.
  </para></listitem></varlistentry>

  <varlistentry><term>check</term><listitem><para>
   When a check is altered in any way (including creation),
   the identifying attributes, including the uuid, are logged to this
   facility.

   <programlisting>
   'C' TIMESTAMP UUID TARGET MODULE NAME
   </programlisting>
  </para></listitem></varlistentry>

  <varlistentry><term>status</term><listitem><para>
   When a check status changes (either availability or
   state) and neither the new state nor the old state are "unknown", it
   is considered a state change for the check.  The new availability
   and new state are logged to this facility.

   <programlisting>
   'S' TIMESTAMP UUID STATE AVAILABILITY DURATION STATUS_MESSAGE
   </programlisting>
  </para></listitem></varlistentry>

  <varlistentry><term>metrics</term><listitem><para>
   Each time a check is completed, the various metrics
   that were observed by the check are logged to this facility.  The
   VALUE is always a string or [[null]] (never binary encoded/packed).
   The TYPE indicates the datatype the check intended when it was
   observed.

   <programlisting>
   'M' TIMESTAMP UUID NAME TYPE VALUE
   </programlisting>

   <variablelist>
     <varlistentry><term>NAME</term><listitem><para>is the name of the metric
      and the encouraged format for this is "name`subname`subsubname`etc"</para></listitem>
      </varlistentry>

     <varlistentry><term>TYPE</term><listitem>
       <variablelist>
         <varlistentry><term>i</term><listitem><para>INT32</para></listitem></varlistentry>
         <varlistentry><term>I</term><listitem><para>UINT32</para></listitem></varlistentry>
         <varlistentry><term>l</term><listitem><para>INT64</para></listitem></varlistentry>
         <varlistentry><term>L</term><listitem><para>UINT64</para></listitem></varlistentry>
         <varlistentry><term>n</term><listitem><para>DOUBLE</para></listitem></varlistentry>
         <varlistentry><term>s</term><listitem><para>STRING</para></listitem></varlistentry>
       </variablelist>
       </listitem>
      </varlistentry>
   </variablelist>
  </para>
  </listitem>
  </varlistentry>
</variablelist>

<example>
<title>Sample configuration for the log section</title>
<programlisting><![CDATA[
  <logs>
    <console>
      <outlet name="stderr" />
      <log name="error" />
      <log name="debug" disabled="true" />
    </console>
    <log name="feed" type="jlog" path="/var/log/noitd.feed" />
    <feeds>
      <outlet name="feed" />
      <log name="check" />
      <log name="metrics" />
      <log name="status">
        <outlet name="error" />
      </log>
    </feeds>
  </logs>
]]></programlisting>
</example>

 <para>In the above example:</para>
 <itemizedlist>
   <listitem><para>
   a &lt;console&gt; metagroup is created for the purpose of inheriting the
   "stderr" outlet.  The logs named "error" and "debug" are
   instantiated and inherit the "stderr" outlet.  However, "debug" is
   disabled, so no input to the "debug" log will be written anywhere.
   </para></listitem>

   <listitem><para>
   a log named "feed" is created of type "jlog" writing to the
   "/var/log/noitd.feed" directory (jlogs paths are directories, whereas 
   "file" paths are filenames).
   </para></listitem>

   <listitem><para>
   a &lt;feeds&gt; metagroup is created for the purpose of inheriting the
   "feed" outlet.  The logs "check," "metrics," and "status" are
   instantiated and will log via the "feed" outlet (all writing to the
   same jlog).  Additionally, the "status" feed is given an additional
   outlet named "error" so we will see inputs to status in both the
   "feed" jlog and on the console ("stderr").
   </para></listitem>
 </itemizedlist>
</section>
</section>
</chapter>
